#!/usr/bin/env bash
# Licensed under the MIT license
# See the LICENCE file in root of the repo

echo 'Self-sustainable dotfiles script'

while getopts "hr:i" opt; do
  case $opt in
    h)
      h=$opt
      ;;
    r)
      r=$OPTARG
      ;;
    i)
      i=$opt
      ;;
    \?)
      echo "Invalid option: -$opt" >&2
      ;;
  esac
done

if [[ $h == 'h' || "$1" == "--help" || ( $# -gt 3 ) ]]; then cat <<HELP

Usage: $(basename "$0") [-r <git-repo-url>] [-i]

    -r  Install git and clone/update all other files from provided URL
    -i  Run all scripts in ./init (install all the things)

HELP
exit; fi

# Logging stuff.
function e_header()    { echo -e "\n\033[1m$@\033[0m"; }
function e_subheader() { echo -e " \033[1m   $@\033[0m"; }
function e_info()      { echo -e " \033[1;34m➜\033[0m  $@"; }
function e_success()   { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()     { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()     { echo -e " \033[1;33m➜\033[0m  $@"; }

export -f e_header e_subheader e_info e_success e_error e_arrow

# Given a list of desired items and installed items, return a list
# of uninstalled items. Arrays in bash are insane (not in a good way).
function to_install() {
  local debug desired installed i desired_s installed_s remain
  if [[ "$1" == 1 ]]; then debug=1; shift; fi
  # Convert args to arrays, handling both space- and newline-separated lists.
  read -ra desired < <(echo "$1" | tr '\n' ' ')
  read -ra installed < <(echo "$2" | tr '\n' ' ')
  # Sort desired and installed arrays.
  unset i; while read -r; do desired_s[i++]=$REPLY; done < <(
    printf "%s\n" "${desired[@]}" | sort
  )
  unset i; while read -r; do installed_s[i++]=$REPLY; done < <(
    printf "%s\n" "${installed[@]}" | sort
  )
  # Get the difference. comm is awesome.
  unset i; while read -r; do remain[i++]=$REPLY; done < <(
    comm -13 <(printf "%s\n" "${installed_s[@]}") <(printf "%s\n" "${desired_s[@]}")
  )
  [[ "$debug" ]] && for v in desired desired_s installed installed_s remain; do
    echo "$v ($(eval echo "\${#$v[*]}")) $(eval echo "\${$v[*]}")"
  done
  echo "${remain[@]}"
}

# Initialize.
function init_header() { e_header "Installing things"; }
function init_do() {
  if [[ -x "$2" ]]; then
    e_arrow "Sourcing $2..."
    source "$2"
  else
    e_arrow "$2 is not executable, skipping..."
  fi
}

# Copy files.
function copy_header() { e_header "Copying files into home directory"; }
function copy_test() {
  if [[ "$2" == '.gitignore' ]]; then
    echo "Ignoring gitignore while copying"
  elif [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    echo "same file"
  elif [[ "$1" -ot "$2" ]]; then
    echo "destination file newer"
  fi
}
function copy_do() {
  if [[ "$1" != '.gitignore' ]]; then
    e_arrow "Copying ~/$1"
    cp -R "$2" ~/ && e_success "~/$1 copied in place"
  fi
}

# Link files.
function link_header() { e_header "Linking files into home directory"; }
function link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
  e_arrow "Linking ~/$1"
  ln -sf ${2#$HOME/} ~/ && e_success "~/$1 linked in place"
}

# Copy, link, init, etc.
function do_stuff() {
  local base dest skip
  local files=(~/.dotfiles/$1/*)
  # No files? abort.
  if (( ${#files[@]} == 0 )); then return; fi
  # Run _header function only if declared.
  [[ $(declare -f "$1_header") ]] && "$1_header"
  # Iterate over files.
  for file in "${files[@]}"; do
    base="$(basename $file)"
    dest="$HOME/$base"
    # Run _test function only if declared.
    if [[ $(declare -f "$1_test") ]]; then
      # If _test function returns a string, skip file and print that message.
      skip="$("$1_test" "$file" "$dest")"
      if [[ "$skip" ]]; then
        e_arrow "Skipping ~/$base, $skip"
        continue
      fi
      # Destination file already exists in ~/. Back it up!
      if [[ -e "$dest" ]]; then
        e_arrow "Backing up ~/$base."
        # Set backup flag, so a nice message can be shown at the end.
        backup=1
        # Create backup dir if it doesn't already exist.
        [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
        # Backup file / link / whatever.
        mv "$dest" "$backup_dir"
      fi
    fi
    # Do stuff.
    "$1_do" "$base" "$file"
  done
}

function ensure_xcode_cli_tools() {
  # https://github.com/timsutton/osx-vm-templates/blob/master/scripts/xcode-cli-tools.sh
  OSX_VERS=$(sw_vers -productVersion | awk -F "." '{print $2}')

  if [ "$OSX_VERS" -ge 9 ]; then
      touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

      [ "$OSX_VERS" -ge 10 ] && PROD=$(softwareupdate -l | grep "Command Line " | awk -F"*" '{print $2}' | sed -e 's/^ *//' | tr -d '\n')
      [ "$OSX_VERS" -eq 9 ] && PROD=$(softwareupdate -l | grep -B 1 "Developer " | head -n 1 | awk -F"*" '{print $2}')

      e_info "Installing $PROD ..."
      softwareupdate -i "$PROD" -v && e_success "XCode CLI Tools for OS X 10.$OSX_VERS installed"
      return
  fi

  [ "$OSX_VERS" -eq 7 ] && DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_xcode_os_x_lion_april_2013.dmg
  [ "$OSX_VERS" -eq 8 ] && DMGURL=http://devimages.apple.com/downloads/xcode/command_line_tools_for_osx_mountain_lion_april_2014.dmg

  TOOLS=clitools.dmg
  curl "$DMGURL" -o "$TOOLS"
  TMPMOUNT=`/usr/bin/mktemp -d /tmp/clitools.XXXX`
  hdiutil attach "$TOOLS" -mountpoint "$TMPMOUNT"
  installer -pkg "$(find $TMPMOUNT -name '*.mpkg')" -target /
  hdiutil detach "$TMPMOUNT"
  rm -rf "$TMPMOUNT"
  rm "$TOOLS"

  e_success "XCode CLI Tools for OS X 10.$OSX_VERS installed"
}


# Enough with the functions, let's do stuff.

if [[ $i != '' ]]; then
  # If Git is not installed, install it
  git >/dev/null 2>/tmp/git-stderr.log
  if [[ $(wc -c /tmp/git-stderr.log | awk '{print $1}') -eq 0 ]]; then
    e_info "Git is already installed"
  else
    e_header "Installing Git"
    LINUX_ISSUE="$(cat /etc/issue 2> /dev/null)"
    if [[ $LINUX_ISSUE =~ Ubuntu || $LINUX_ISSUE =~ Debian ]]; then
      sudo apt-get -qq install git
    elif [[ $LINUX_ISSUE =~ CentOS ]]; then
      sudo yum -y -q install git
    elif [[ "$OSTYPE" =~ ^darwin ]]; then
      ensure_xcode_cli_tools
    fi
  fi
fi

# Check if Git is installed
git >/dev/null 2>/tmp/git-stderr.log
if [[ $(wc -c /tmp/git-stderr.log | awk '{print $1}') -ne 0 ]]; then
  e_error "Git is missing. Use -i option or install it manually."
  exit 1
fi

# Initialize
if [[ $r != '' ]]; then
  if [[ ! -d ~/.dotfiles ]]; then
    new_dotfiles_install=1
    OLD_IFS=$IFS
    IFS='@'
    full_url=($r);
    repo_url="${full_url[0]}"; branch_name="${full_url[1]}"
    IFS=$OLD_IFS

    e_header "Downloading dotfiles from $r"
    git clone --recursive $repo_url ~/.dotfiles

    if [[ $branch_name != '' ]]; then
      e_info "Checking out branch $branch_name"
      cd ~/.dotfiles && git checkout $branch_name
    fi
  else
    e_header "Updating dotfiles"
    cd ~/.dotfiles
    git pull
    git submodule update --init --recursive --quiet
  fi
fi

if [ ! -d ~/.dotfiles ]; then
  e_error "Either use -r option or clone the repo into ~/.dotfiles"
  exit 1
fi

# Utilities, helpers.
if [ "$(ls -A ~/.dotfiles/source | grep -v '.gitignore')" ]; then
  for file in ~/.dotfiles/source/*; do
    source "$file"
  done
fi

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# If backups are needed, this is where they'll go.
backup_dir="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

# Execute code for each file in these subdirectories.
if [[ $i == 'i' ]]; then
  do_stuff "init"
fi
do_stuff "copy"
do_stuff "link"

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Show notice after installation
if [[ "$new_dotfiles_install" && -e "conf/first_time_reminder.sh" ]]; then
  e_header "First-Time Reminders"
  source "conf/first_time_reminder.sh"
fi

# All done!
e_header "All done!"